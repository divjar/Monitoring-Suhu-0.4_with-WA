//tagar12052025

#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <PZEM004Tv30.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <time.h>

// Pin Definitions
#define BUZZER_PIN D0
#define LED_RED_PIN D7
#define LED_GREEN_PIN D8

// MQTT Configuration
const char* mqtt_server = "10.10.11.27";
const char* mqtt_topic = "listrik_noc";
const char* mqtt_status_topic = "listrik_noc/status";
WiFiClient espClient;
PubSubClient mqttClient(espClient);

// WhatsApp CallMeBot Configuration
const String whatsappNumbers[] = {
  "6282229991796"  // tagar
};
const String whatsappApiKeys[] = {
  "3444775"        // tagar
};

// PZEM Sensors
PZEM004Tv30 pzem1(D1, D2);   // GPIO5(D1) to Rx, GPIO4(D2) to Tx
PZEM004Tv30 pzem2(D3, D4);   // GPIO0(D3) to Rx, GPIO2(D4) to Tx
PZEM004Tv30 pzem3(D5, D6);   // GPIO14(D5) to Rx, GPIO12(D6) to Tx

// WiFi Configuration
const char* ssid = "UMM-ICT";
const char* password = "UMM.1964";

// Telegram Configuration
#define BOTtoken "6922228203:AAG5NEZAuySp0gkCjKEfmRH0w4Byd1kRklc"
#define idChat   "1138557293"

WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

// Timing Variables
unsigned long lastSensorRead = 0;
unsigned long lastMQTTSend = 0;
unsigned long lastBotCheck = 0;
unsigned long lastPowerOutNotify = 0;
unsigned long lastMqttBlink = 0;
unsigned long lastBuzzerToggle = 0;
const long sensorInterval = 1000;    // Read sensors every 1 second
const long mqttInterval = 2000;     // Send to MQTT every 2 seconds
const long botInterval = 1000;      // Check Telegram every 1 second
const long powerOutNotifyInterval = 1000; // Notify every 1 second during outage
const long mqttBlinkInterval = 500; // MQTT status blink interval

// Power Status Tracking
bool powerOutNotificationSent[3] = {false, false, false};
bool powerRestoredNotificationSent[3] = {false, false, false};
bool mqttConnected = false;
bool lastMqttState = false;
bool buzzerState = false;

// Sensor Data
struct PhaseData {
  float voltage;
  float current;
  float power;
  float energy;
  float frequency;
  float pf;
  float va;
  float VAR;
};

PhaseData phases[3];
PhaseData threePhase;
float totalPower = 0;
bool powerOutage = false;

void setup() {
  Serial.begin(115200);
  
  // Initialize GPIOs
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(LED_RED_PIN, OUTPUT);
  pinMode(LED_GREEN_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);
  digitalWrite(LED_RED_PIN, LOW);
  digitalWrite(LED_GREEN_PIN, HIGH); // Start with green LED on

  client.setInsecure();

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
    digitalWrite(LED_GREEN_PIN, !digitalRead(LED_GREEN_PIN));
  }
  Serial.println("\nWiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // Initialize MQTT
  mqttClient.setServer(mqtt_server, 1883);
  mqttClient.setBufferSize(2048);
  randomSeed(micros());

  // Initialize time
  configTime(7 * 3600, 0, "pool.ntp.org", "time.nist.gov");
  Serial.println("Waiting for time sync...");
  while (time(nullptr) < 100000) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Time synchronized");
}

void loop() {
  unsigned long currentMillis = millis();

  // Read sensor data periodically
  if (currentMillis - lastSensorRead >= sensorInterval) {
    readSensorData();
    calculate3PhaseValues();
    checkPowerStatus();
    lastSensorRead = currentMillis;
  }

  // Send to MQTT periodically
  if (currentMillis - lastMQTTSend >= mqttInterval) {
    if (!mqttClient.connected()) {
      reconnectMQTT();
    } else {
      sendCompleteDataToMQTT();
    }
    lastMQTTSend = currentMillis;
  }

  // Check Telegram messages
  if (currentMillis - lastBotCheck >= botInterval) {
    checkTelegramMessages();
    lastBotCheck = currentMillis;
  }

  // Handle MQTT loop
  mqttClient.loop();

  // Update status indicators
  updateStatusIndicators();
}

void readSensorData() {
  // Phase 1 (R)
  phases[0].voltage = zeroIfNan(pzem1.voltage());
  phases[0].current = zeroIfNan(pzem1.current());
  phases[0].power = zeroIfNan(pzem1.power());
  phases[0].energy = zeroIfNan(pzem1.energy());
  phases[0].frequency = zeroIfNan(pzem1.frequency());
  phases[0].pf = zeroIfNan(pzem1.pf());
  phases[0].va = (phases[0].pf == 0) ? 0 : phases[0].power / phases[0].pf;
  phases[0].VAR = (phases[0].pf == 0) ? 0 : phases[0].power / phases[0].pf * sqrt(1-sq(phases[0].pf));

  // Phase 2 (S)
  phases[1].voltage = zeroIfNan(pzem2.voltage());
  phases[1].current = zeroIfNan(pzem2.current());
  phases[1].power = zeroIfNan(pzem2.power());
  phases[1].energy = zeroIfNan(pzem2.energy());
  phases[1].frequency = zeroIfNan(pzem2.frequency());
  phases[1].pf = zeroIfNan(pzem2.pf());
  phases[1].va = (phases[1].pf == 0) ? 0 : phases[1].power / phases[1].pf;
  phases[1].VAR = (phases[1].pf == 0) ? 0 : phases[1].power / phases[1].pf * sqrt(1-sq(phases[1].pf));

  // Phase 3 (T)
  phases[2].voltage = zeroIfNan(pzem3.voltage());
  phases[2].current = zeroIfNan(pzem3.current());
  phases[2].power = zeroIfNan(pzem3.power());
  phases[2].energy = zeroIfNan(pzem3.energy());
  phases[2].frequency = zeroIfNan(pzem3.frequency());
  phases[2].pf = zeroIfNan(pzem3.pf());
  phases[2].va = (phases[2].pf == 0) ? 0 : phases[2].power / phases[2].pf;
  phases[2].VAR = (phases[2].pf == 0) ? 0 : phases[2].power / phases[2].pf * sqrt(1-sq(phases[2].pf));

  // Calculate total power
  totalPower = phases[0].power + phases[1].power + phases[2].power;
}

void calculate3PhaseValues() {
  // Voltage calculation
  threePhase.voltage = sqrt(sq(phases[0].voltage) + sq(phases[1].voltage) + sq(phases[2].voltage));
  
  // Current calculation (average of active phases)
  int activePhases = 0;
  float currentSum = 0;
  for (int i = 0; i < 3; i++) {
    if (phases[i].current > 0) {
      currentSum += phases[i].current;
      activePhases++;
    }
  }
  threePhase.current = (activePhases > 0) ? currentSum / activePhases : 0;

  // Power and energy (sum of all phases)
  threePhase.power = phases[0].power + phases[1].power + phases[2].power;
  threePhase.energy = phases[0].energy + phases[1].energy + phases[2].energy;
  threePhase.va = phases[0].va + phases[1].va + phases[2].va;
  threePhase.VAR = phases[0].VAR + phases[1].VAR + phases[2].VAR;

  // Frequency (average of active phases)
  activePhases = 0;
  float frequencySum = 0;
  for (int i = 0; i < 3; i++) {
    if (phases[i].frequency > 0) {
      frequencySum += phases[i].frequency;
      activePhases++;
    }
  }
  threePhase.frequency = (activePhases > 0) ? frequencySum / activePhases : 0;

  // Power factor (average of active phases)
  activePhases = 0;
  float pfSum = 0;
  for (int i = 0; i < 3; i++) {
    if (phases[i].pf > 0) {
      pfSum += phases[i].pf;
      activePhases++;
    }
  }
  threePhase.pf = (activePhases > 0) ? pfSum / activePhases : 0;
}

void sendCompleteDataToMQTT() {
  DynamicJsonDocument doc(2048);
  
  // Phase R Data
  doc["phase_r"] = phases[0].voltage;
  doc["current_r"] = phases[0].current;
  doc["power_r"] = phases[0].power;
  doc["energy_r"] = phases[0].energy;
  doc["frequency_r"] = phases[0].frequency;
  doc["pf_r"] = phases[0].pf;
  doc["va_r"] = phases[0].va;
  doc["var_r"] = phases[0].VAR;

  // Phase S Data
  doc["phase_s"] = phases[1].voltage;
  doc["current_s"] = phases[1].current;
  doc["power_s"] = phases[1].power;
  doc["energy_s"] = phases[1].energy;
  doc["frequency_s"] = phases[1].frequency;
  doc["pf_s"] = phases[1].pf;
  doc["va_s"] = phases[1].va;
  doc["var_s"] = phases[1].VAR;

  // Phase T Data
  doc["phase_t"] = phases[2].voltage;
  doc["current_t"] = phases[2].current;
  doc["power_t"] = phases[2].power;
  doc["energy_t"] = phases[2].energy;
  doc["frequency_t"] = phases[2].frequency;
  doc["pf_t"] = phases[2].pf;
  doc["va_t"] = phases[2].va;
  doc["var_t"] = phases[2].VAR;

  // Three Phase Data
  doc["voltage_3ph"] = threePhase.voltage;
  doc["current_3ph"] = threePhase.current;
  doc["power_3ph"] = threePhase.power;
  doc["energy_3ph"] = threePhase.energy;
  doc["frequency_3ph"] = threePhase.frequency;
  doc["pf_3ph"] = threePhase.pf;
  doc["va_3ph"] = threePhase.va;
  doc["var_3ph"] = threePhase.VAR;

  String payload;
  serializeJson(doc, payload);

  if (mqttClient.publish(mqtt_topic, payload.c_str(), true)) {
    Serial.println("MQTT message published successfully");
    Serial.println(payload);
  } else {
    Serial.println("Failed to publish MQTT message");
  }
}

// [Rest of the functions remain exactly the same as in the previous code]
// checkPowerStatus(), createStatusMessage(), sendPowerNotification(), 
// sendWhatsAppNotification(), getCurrentTime(), sendToWhatsApp(), 
// urlEncode(), reconnectMQTT(), checkTelegramMessages(), 
// handleNewMessages(), updateStatusIndicators(), zeroIfNan()

void checkPowerStatus() {
  const char* phaseNames[] = {"R", "S", "T"};
  bool currentOutage = false;
  unsigned long currentMillis = millis();

  for (int i = 0; i < 3; i++) {
    if (phases[i].voltage < 100) {  // Power is out
      currentOutage = true;
      
      if (!powerOutNotificationSent[i]) {
        // First notification for this phase outage
        String statusMessage = createStatusMessage();
        sendPowerNotification(phaseNames[i], statusMessage, false);
        sendWhatsAppNotification(statusMessage, false);
        powerOutNotificationSent[i] = true;
        powerRestoredNotificationSent[i] = false;
        lastPowerOutNotify = currentMillis;
      } 
      else if (currentMillis - lastPowerOutNotify >= powerOutNotifyInterval) {
        // Subsequent notifications during ongoing outage (Telegram only)
        String statusMessage = createStatusMessage();
        sendPowerNotification(phaseNames[i], statusMessage, false);
        lastPowerOutNotify = currentMillis;
      }
    } 
    else {  // Power is back
      if (powerOutNotificationSent[i] && !powerRestoredNotificationSent[i]) {
        // Power restored notification (both Telegram and WhatsApp)
        String statusMessage = createStatusMessage();
        sendPowerNotification(phaseNames[i], statusMessage, true);
        sendWhatsAppNotification(statusMessage, true);
        powerRestoredNotificationSent[i] = true;
        powerOutNotificationSent[i] = false;
      }
    }
  }

  powerOutage = currentOutage;
}

String createStatusMessage() {
  String message = "⚡️ STATUS LISTRIK ⚡️\n";
  message += "🆁: " + String(phases[0].voltage, 1) + "V, " + String(phases[0].current, 2) + "A\n";
  message += "🆂: " + String(phases[1].voltage, 1) + "V, " + String(phases[1].current, 2) + "A\n";
  message += "🆃: " + String(phases[2].voltage, 1) + "V, " + String(phases[2].current, 2) + "A\n";
  message += "🔌 Total: " + String(totalPower, 1) + "W\n\n";
  
  message += "📡 STATUS PERANGKAT:\n";
  message += "📶 WiFi: " + String(WiFi.RSSI()) + "dBm\n";
  message += "🌐 IP: " + WiFi.localIP().toString() + "\n";
  message += "🔗 MQTT: " + String(mqttClient.connected() ? "Terhubung" : "Terputus") + "\n";
  message += "🕒 " + getCurrentTime();
  
  return message;
}

void sendPowerNotification(String phase, String message, bool restored) {
  bot.sendChatAction(idChat, "typing");
  String fullMessage = restored ? "✅ LISTRIK KEMBALI NORMAL ✅\n" : "⚠️ LISTRIK PADAM! ⚠️\n";
  fullMessage += "\nℹ Fase " + phase + (restored ? " Telah Pulih\n\n" : " Padam\n\n");
  fullMessage += message;
  
  if (bot.sendMessage(idChat, fullMessage, "")) {
    Serial.println("Telegram notification sent successfully");
  } else {
    Serial.println("Failed to send Telegram notification");
  }
}

void sendWhatsAppNotification(String message, bool restored) {
  static bool firstOutageNotificationSent = false;
  
  if (restored) {
    String fullMessage = "✅ LISTRIK KEMBALI NORMAL ✅\n\n";
    fullMessage += message;
    
    Serial.println("Attempting to send WhatsApp restoration notification...");
    for (int i = 0; i < sizeof(whatsappNumbers)/sizeof(whatsappNumbers[0]); i++) {
      bool success = sendToWhatsApp(whatsappNumbers[i], whatsappApiKeys[i], fullMessage);
      Serial.print("WhatsApp to ");
      Serial.print(whatsappNumbers[i]);
      Serial.println(success ? " - SUCCESS" : " - FAILED");
      delay(2000);
    }
    firstOutageNotificationSent = false;
  } 
  else if (!firstOutageNotificationSent) {
    String fullMessage = "⚠️ LISTRIK PADAM! ⚠️\n\n";
    fullMessage += message;
    
    Serial.println("Attempting to send WhatsApp outage notification...");
    for (int i = 0; i < sizeof(whatsappNumbers)/sizeof(whatsappNumbers[0]); i++) {
      bool success = sendToWhatsApp(whatsappNumbers[i], whatsappApiKeys[i], fullMessage);
      Serial.print("WhatsApp to ");
      Serial.print(whatsappNumbers[i]);
      Serial.println(success ? " - SUCCESS" : " - FAILED");
      delay(2000);
    }
    firstOutageNotificationSent = true;
  }
}

String getCurrentTime() {
  time_t now = time(nullptr);
  struct tm* timeinfo = localtime(&now);
  
  char timeString[20];
  strftime(timeString, sizeof(timeString), "%H:%M:%S %d/%m/%Y", timeinfo);
  return String(timeString);
}

bool sendToWhatsApp(String phoneNumber, String apiKey, String message) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WhatsApp send failed - WiFi not connected");
    return false;
  }

  WiFiClientSecure client;
  HTTPClient https;
  
  client.setInsecure();
  
  String encodedMessage = urlEncode(message);
  String url = "https://api.callmebot.com/whatsapp.php?phone=" + phoneNumber + 
               "&text=" + encodedMessage + "&apikey=" + apiKey;
  
  Serial.print("Sending to URL: ");
  Serial.println(url);

  if (!https.begin(client, url)) {
    Serial.println("WhatsApp send failed - HTTPS begin failed");
    return false;
  }

  int httpCode = https.GET();
  String payload = https.getString();
  https.end();

  Serial.print("HTTP Response code: ");
  Serial.println(httpCode);
  Serial.print("Response payload: ");
  Serial.println(payload);

  return (httpCode == HTTP_CODE_OK && payload.indexOf("success") >= 0);
}

String urlEncode(String str) {
  String encodedString = "";
  for (unsigned int i = 0; i < str.length(); i++) {
    char c = str.charAt(i);
    if (isalnum(c) || c == '-' || c == '_' || c == '.' || c == '~') {
      encodedString += c;
    } else if (c == ' ') {
      encodedString += '+';
    } else {
      char hex[4];
      sprintf(hex, "%%%02X", c);
      encodedString += hex;
    }
  }
  return encodedString;
}

void reconnectMQTT() {
  if (!mqttClient.connected()) {
    Serial.print("Attempting MQTT connection...");
    
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    
    if (mqttClient.connect(clientId.c_str())) {
      Serial.println("connected");
      mqttConnected = true;
      lastMqttState = true;
    } else {
      Serial.print("failed, rc=");
      Serial.print(mqttClient.state());
      mqttConnected = false;
      lastMqttState = false;
    }
  }
}

void checkTelegramMessages() {
  int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
  
  while(numNewMessages) {
    handleNewMessages(numNewMessages);
    numNewMessages = bot.getUpdates(bot.last_message_received + 1);
  }
}

void handleNewMessages(int numNewMessages) {
  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    String text = bot.messages[i].text;
    String from_name = bot.messages[i].from_name;
    if (from_name == "") from_name = "Guest";
 
    if (text == "/listrik") {
      bot.sendMessage(chat_id, createStatusMessage(), "");
    }
    else if (text == "/start") {
      String welcome = "Hi " + from_name + ", pilih pengecekan:\n";
      welcome += "⚡️ /listrik (Status Listrik)\n";
      welcome += "🌡️ /suhu (Status Suhu NOC)\n";
      welcome += "🌡️ /suhu2 (Status Suhu R. UPS)";
      bot.sendMessage(chat_id, welcome, "");
    }
  }
}

void updateStatusIndicators() {
  unsigned long currentMillis = millis();

  // Handle MQTT connection status LED
  if (!mqttClient.connected()) {
    if (currentMillis - lastMqttBlink >= mqttBlinkInterval) {
      digitalWrite(LED_GREEN_PIN, !digitalRead(LED_GREEN_PIN));
      lastMqttBlink = currentMillis;
    }
  } else {
    digitalWrite(LED_GREEN_PIN, !powerOutage);
  }

  // Handle power outage indicators
  if (powerOutage) {
    digitalWrite(LED_RED_PIN, HIGH);
    if (currentMillis - lastBuzzerToggle >= 1000) {
      buzzerState = !buzzerState;
      digitalWrite(BUZZER_PIN, buzzerState);
      lastBuzzerToggle = currentMillis;
    }
  } else {
    digitalWrite(LED_RED_PIN, LOW);
    digitalWrite(BUZZER_PIN, LOW);
    buzzerState = false;
  }
}

float zeroIfNan(float v) {
  return isnan(v) ? 0 : v;
}
