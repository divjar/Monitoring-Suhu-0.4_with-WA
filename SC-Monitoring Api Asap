//tagar072025
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <PubSubClient.h>
#include <UniversalTelegramBot.h>
#include <WiFiClientSecure.h>

// Konfigurasi WiFi
const char* ssid = "UMM-ICT";
const char* password = "UMM.1964";

// Konfigurasi MQTT
const char* mqtt_server = "10.10.11.27";
const char* mqtt_topic = "api_asap";

// Konfigurasi Telegram
#define BOTtoken "7959548171:AAG8m_DwIBO13OTFtgHbCjsVONCu0Exek4g"
#define CHAT_ID "1138557293"

// Konfigurasi WhatsApp CallMeBot
const String whatsappNumbers[] = {
  "6282229991796", "6285232851538", "6282284029002", 
  "6281540089927", "6285326233576", "6285655522801",
  "6281234290701", "6282143637572", "6289509483305"
};
const String whatsappApiKeys[] = {
  "3444775", "6498776", "6210029", "8300770", 
  "2746693", "4543249", "9292526", "4994888", "9895757"
};
const int whatsappCount = 9;

// Pin
#define LED_MERAH D0
#define LED_HIJAU D1
#define BUZZER D2
#define SENSOR_API A0  // Sensor Flame (Api)
#define SENSOR_ASAP D5 // Sensor MQ-2 (Asap)

// Threshold
#define API_THRESHOLD 300   // Nilai lebih rendah berarti api terdeteksi (flame sensor)
#define ASAP_THRESHOLD LOW  // Nilai LOW berarti asap terdeteksi (karena pull-up)

WiFiClient espClient;
PubSubClient client(espClient);
WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOTtoken, secured_client);

unsigned long lastMsg = 0;
unsigned long lastTelegramCheck = 0;
unsigned long lastAlertTime = 0;
unsigned long lastWhatsAppAlert = 0;
bool apiAlertActive = false;
bool asapAlertActive = false;
bool normalConditionSent = true;
int lastApiValue = 0;
int lastAsapValue = 1; // Default HIGH (no smoke)

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("NodeMCUApiAsapClient")) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void handleNewMessages(int numNewMessages) {
  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    String text = bot.messages[i].text;
    String from_name = bot.messages[i].from_name;
    
    if (text == "/start" || text == "/start@DivjarApiAsap_bot") {
      String welcomeMsg = "üî•üí® *Bot Monitoring Api dan Asap* üî•üí®\n\n";
      welcomeMsg += "Halo " + from_name + "!\n";
      welcomeMsg += "Saya memantau kondisi api dan asap secara real-time.\n\n";
      welcomeMsg += "üìã *Perintah:*\n";
      welcomeMsg += "/api - Data sensor terkini\n";
      welcomeMsg += "/start - Menu bantuan\n\n";
      welcomeMsg += "üö® *Notifikasi otomatis* akan dikirim saat terdeteksi api/asap";
      
      bot.sendMessage(chat_id, welcomeMsg, "Markdown");
    }
    else if (text == "/api" || text == "/api@DivjarApiAsap_bot") {
      String message = "üìä *Status Monitoring Api & Asap*\n\n";
      message += "üî• Nilai Api: " + String(lastApiValue) + "\n";
      message += "üí® Status Asap: " + String(lastAsapValue == LOW ? "TERDETEKSI" : "Tidak terdeteksi") + "\n";
      message += "üïí " + getTimeStamp() + "\n\n";
      
      if (lastApiValue < API_THRESHOLD) {
        message += "üö® *API TERDETEKSI!* Bahaya kebakaran!\n";
      }
      if (lastAsapValue == LOW) {
        message += "üö® *ASAP TERDETEKSI!* Potensi kebakaran!\n";
      }
      if (lastApiValue >= API_THRESHOLD && lastAsapValue == HIGH) {
        message += "‚úÖ Kondisi AMAN\n";
      }
      
      bot.sendMessage(chat_id, message, "Markdown");
    }
  }
}

String urlEncode(const String &str) {
  String encodedString = "";
  char c;
  char code0;
  char code1;
  
  for (unsigned int i = 0; i < str.length(); i++) {
    c = str.charAt(i);
    if (c == ' ') {
      encodedString += '+';
    } else if (isalnum(c)) {
      encodedString += c;
    } else {
      code1 = (c & 0xf) + '0';
      if ((c & 0xf) > 9) {
        code1 = (c & 0xf) - 10 + 'A';
      }
      c = (c >> 4) & 0xf;
      code0 = c + '0';
      if (c > 9) {
        code0 = c - 10 + 'A';
      }
      encodedString += '%';
      encodedString += code0;
      encodedString += code1;
    }
  }
  return encodedString;
}

void sendWhatsAppMessage(const String &message) {
  WiFiClient client;
  HTTPClient http;
  
  for (int i = 0; i < whatsappCount; i++) {
    String url = "http://api.callmebot.com/whatsapp.php?phone=" + whatsappNumbers[i] + 
                 "&text=" + urlEncode(message) + "&apikey=" + whatsappApiKeys[i];
    
    if (http.begin(client, url)) {
      int httpCode = http.GET();
      if (httpCode > 0) {
        Serial.printf("WhatsApp sent to %s, status: %d\n", whatsappNumbers[i].c_str(), httpCode);
      } else {
        Serial.printf("WhatsApp failed to %s, error: %s\n", whatsappNumbers[i].c_str(), http.errorToString(httpCode).c_str());
      }
      http.end();
    } else {
      Serial.println("WhatsApp connection failed");
    }
    delay(1000);
  }
}

void sendAlert(String type, int apiValue, int asapValue) {
  String alertMsg = "üö® *ALERTA " + type + "* üö®\n\n";
  alertMsg += "üî• Nilai Api: " + String(apiValue) + "\n";
  alertMsg += "üí® Status Asap: " + String(asapValue == LOW ? "TERDETEKSI" : "Tidak terdeteksi") + "\n";
  alertMsg += "üïí " + getTimeStamp() + "\n\n";
  alertMsg += "‚ö†Ô∏è SEGERA LAKUKAN PENANGANAN!";
  
  bot.sendMessage(CHAT_ID, alertMsg, "Markdown");
  
  // Kirim WhatsApp
  String whatsappMsg = "üî•PERINGATAN " + type + "!üî•\nüî•Api: " + String(apiValue) + 
                      "\nüí®Asap: " + String(asapValue == LOW ? "TERDETEKSI" : "Tidak terdeteksi") + 
                      "\n\n‚ö†Ô∏èSilahkan Cek Telegram Untuk Kondisi Terkini: \nhttps://t.me/DivjarApiAsap_bot";
  sendWhatsAppMessage(whatsappMsg);
}

void sendNormalCondition() {
  String normalMsg = "‚úÖ *KONDISI NORMAL KEMBALI* ‚úÖ\n\n";
  normalMsg += "üî• Nilai Api: " + String(lastApiValue) + "\n";
  normalMsg += "üí® Status Asap: " + String(lastAsapValue == LOW ? "TERDETEKSI" : "Tidak terdeteksi") + "\n";
  normalMsg += "üïí " + getTimeStamp();
  
  bot.sendMessage(CHAT_ID, normalMsg, "Markdown");
}

String getTimeStamp() {
  unsigned long seconds = millis() / 1000;
  unsigned long minutes = seconds / 60;
  unsigned long hours = minutes / 60;
  seconds %= 60;
  minutes %= 60;
  hours %= 24;
  
  return String(hours) + ":" + (minutes < 10 ? "0" : "") + String(minutes) + ":" + (seconds < 10 ? "0" : "") + String(seconds);
}

void setup() {
  pinMode(LED_MERAH, OUTPUT);
  pinMode(LED_HIJAU, OUTPUT);
  pinMode(BUZZER, OUTPUT);
  pinMode(SENSOR_ASAP, INPUT_PULLUP); // Menggunakan internal pull-up resistor
  digitalWrite(LED_MERAH, LOW);
  digitalWrite(LED_HIJAU, HIGH); // Kondisi normal hijau menyala
  digitalWrite(BUZZER, LOW);
  
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  secured_client.setInsecure();
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  
  // Baca sensor setiap 2 detik
  if (now - lastMsg > 2000) {
    lastMsg = now;
    
    lastApiValue = analogRead(SENSOR_API);
    lastAsapValue = digitalRead(SENSOR_ASAP);
    
    Serial.print("Api: ");
    Serial.print(lastApiValue);
    Serial.print(" || Asap: ");
    Serial.println(lastAsapValue == LOW ? "TERDETEKSI" : "Tidak terdeteksi");
    
    // Kirim data ke MQTT
    String payload = "{\"api\":" + String(lastApiValue) + ",\"asap\":" + String(lastAsapValue) + "}";
    client.publish(mqtt_topic, payload.c_str());
    
    // Kontrol alarm
    if (lastApiValue < API_THRESHOLD || lastAsapValue == LOW) {
      digitalWrite(LED_HIJAU, LOW);
      digitalWrite(LED_MERAH, HIGH);
      digitalWrite(BUZZER, HIGH);
      
      if (lastApiValue < API_THRESHOLD) apiAlertActive = true;
      if (lastAsapValue == LOW) asapAlertActive = true;
      
      if (!normalConditionSent) {
        if (now - lastWhatsAppAlert > 60000) {  // Kirim notifikasi setiap 1 menit
          lastWhatsAppAlert = now;
          if (lastApiValue < API_THRESHOLD && lastAsapValue == LOW) {
            sendAlert("API & ASAP", lastApiValue, lastAsapValue);
          } else if (lastApiValue < API_THRESHOLD) {
            sendAlert("API", lastApiValue, lastAsapValue);
          } else {
            sendAlert("ASAP", lastApiValue, lastAsapValue);
          }
        }
      }
      normalConditionSent = false;
    } else {
      digitalWrite(LED_HIJAU, HIGH);
      digitalWrite(LED_MERAH, LOW);
      digitalWrite(BUZZER, LOW);
      
      if ((apiAlertActive || asapAlertActive) && !normalConditionSent) {
        sendNormalCondition();
        apiAlertActive = false;
        asapAlertActive = false;
        normalConditionSent = true;
      }
    }
  }
  
  // Cek Telegram
  if (millis() - lastTelegramCheck > 1000) {
    lastTelegramCheck = millis();
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    while (numNewMessages) {
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
  }
}
